name: Build and publish release on new tag
on:
  push:
    tags:
      - '*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: version
        run: echo ::set-output name=version::$(echo $GITHUB_REF | cut -d / -f 3)
        id: version
      - name: Create new release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ steps.version.outputs.version }}
    
  build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build linux x64
        run: dotnet publish -c Release --self-contained -r linux-x64 -o packages/linux/amd64 -p:PublishSingleFile=true -p:PublishTrimmed=false -p:InvariantGlobalization=true -p:DebugType=None -p:DebugSymbols=false -p:Version=${{ needs.create-release.outputs.release_version }}
      - name: Build linux arm
        run: dotnet publish -c Release --self-contained -r linux-arm64 -o packages/linux/arm64 -p:PublishSingleFile=true -p:PublishTrimmed=false -p:InvariantGlobalization=true -p:DebugType=None -p:DebugSymbols=false -p:Version=${{ needs.create-release.outputs.release_version }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # TODO: replace username with action variable
          username: punksecurity
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Run Buildx
        run: |
          docker buildx build . \
            --push \
            --progress=plain \
            --tag docker.io/punksecurity/smbeagle:${{ needs.create-release.outputs.release_version }} \
            --tag docker.io/punksecurity/smbeagle:latest \
            --platform linux/amd64,linux/arm64
      - name: Create Linux x64 archive
        run: cd packages/linux/amd64 && zip linux_amd64.zip SMBeagle
      - name: Create Linux arm archive
        run: cd packages/linux/arm64 && zip linux_arm64.zip SMBeagle
      - name: Upload Linux x64 binary
        uses: actions/upload-release-asset@v1
        env:
         GITHUB_TOKEN: ${{ github.token }}
        with:
         upload_url: ${{ needs.create-release.outputs.release_upload_url }}
         asset_path: ./packages/linux/amd64/linux_amd64.zip
         asset_name: smbeagle_${{ needs.create-release.outputs.release_version }}_linux_amd64.zip
         asset_content_type: application/zip
      - name: Upload Linux ARM binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ./packages/linux/arm64/linux_arm64.zip
          asset_name: smbeagle_${{ needs.create-release.outputs.release_version }}_linux_arm64.zip
          asset_content_type: application/zip

  build-windows:
    runs-on: windows-2025
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build windows x64
        run: dotnet publish -c Release --self-contained -r win-x64 -o packages\windows\x64 -p:PublishSingleFile=true -p:PublishTrimmed=false -p:InvariantGlobalization=true -p:DebugType=None -p:DebugSymbols=false -p:Version=${{ needs.create-release.outputs.release_version }}
      # - name: Install signing tool
      #   run: dotnet tool install --global AzureSignTool --version 3.0.0
      # - name: Digitally sign executable
      #   env:
      #     CERT_APP_SECRET: ${{ secrets.AZUREKEYVAULTCLIENTSECRET }}
      #     CERT_APP_ID: ${{ secrets.AZUREKEYVAULTAPPLICATIONID }}
      #     TENANT_ID: ${{ secrets.AZUREKEYVAULTTENANTID }}
      #     VAULT_URI: ${{ secrets.AZUREKEYVAULTURI }}
      #   run: azuresigntool sign -kvt "$env:TENANT_ID" -kvu "$env:VAULT_URI" -kvi "$env:CERT_APP_ID" -kvs "$env:CERT_APP_SECRET" -kvc "PunkSecurity-CodeSigningCert-2022" -tr http://timestamp.globalsign.com/tsa/r6advanced1 -v .\packages\windows\x64\SMBeagle.exe
      
      - name: Create Windows archive
        run: Compress-Archive -DestinationPath .\win_x64.zip -Path .\packages\windows\x64
      - name: Upload Win x64 binary
        uses: actions/upload-release-asset@v1
        env:
         GITHUB_TOKEN: ${{ github.token }}
        with:
         upload_url: ${{ needs.create-release.outputs.release_upload_url }}
         asset_path: .\win_x64.zip
         asset_name: smbeagle_${{ needs.create-release.outputs.release_version }}_win_x64.zip
         asset_content_type: application/zip
